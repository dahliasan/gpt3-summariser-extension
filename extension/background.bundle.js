(()=>{"use strict";const e={detailed:"https://www.everyprompt.com/api/v0/calls/personal-17/detailed-summary-and-advice-pZMlOa",short:"https://www.everyprompt.com/api/v0/calls/personal-17/short-summary-sSJ6Zi",short2:"https://www.everyprompt.com/api/v0/calls/personal-17/short-summary-copy-YAhgjj",keypoints:"https://www.everyprompt.com/api/v0/calls/personal-17/key-points-ZJakZM"};async function t(e,t){t||(t=await async function(){let[e]=await chrome.tabs.query({active:!0,lastFocusedWindow:!0});return e}()),console.log("sending injection message to:",t),chrome.tabs.sendMessage(t.id,{type:"inject",message:e},(e=>{"failed"===e.status&&console.log("injection failed.")}))}async function o(e,t){try{const o=await new Promise((e=>{chrome.storage.local.get(["uniqueUserId"],(t=>{if(t.uniqueUserId)e(t.uniqueUserId);else{const t=Date.now().toString()+Math.random().toString(36).substring(2,15);chrome.storage.local.set({uniqueUserId:t},(()=>{e(t)}))}}))})),n=await fetch(t,{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer wVcIxPHJadXQotPGPgjR5"},body:JSON.stringify({variables:{text:l(e)},user:o})}),s=await n.json();return console.log("API replied:",s),console.log(n.status),200!==n.status?[null,s]:[s,null]}catch(e){return console.error("Error:",e),[null,e]}}async function n(n,i,c){let l,u,m,d,g,h,p=Date.now();t({content:"generating"},c);let[[w,y],[f,b]]=await Promise.all([o(n,e.detailed),o(n,e.keypoints)]);if(y){if(console.log("error message received: ",y),!y.message?.includes("consider using fewer tokens"))return void t({content:y},c);{t({content:"ðŸ˜± wowza! that's alot of text... gotta bring in the big guns for this one. hang tight!"},c);const r=await async function(n){const r=await s(n);if(t({content:"ðŸ«¡ ok, not long now... one summary coming right up!"}),r.split(" ").length<=500){const t=await async function(t){const[n,s]=await o(t,e.short2);if(s)throw s;return n}(r);return[t,{blob:r}]}{const t=await async function(t){const[n,s]=await o(t,e.detailed);if(s)throw s;return n}(r);return[t,{blob:r}]}}(n);w=r[0],g=r[1]}}else if(b&&(console.log("error message received: ",b),b.message?.includes("consider using fewer tokens"))){console.log("initiate divide and conquer");const t=s(n);g={...g,blob:t},f=await async function(t){const[n,s]=await o(t,e.keyPoints);if(s)throw s;return n}(t),console.log("summaryData2",f)}var v,x;d=w.completions.pop(),h=`${d.text}\n\n${f.completions.pop().text}`,l={date:Date.now(),title:c.title,url:c.url,content:h,timeSaved:(v=n,x=h,(v.split(" ").length-x.split(" ").length)/250),timeTaken:Date.now()-p},g&&(l={...l,...g}),t(l,c),u=await a(`${h} \n\n ${l.title} \n\n ${l.url} \n\n date: ${l.date}`),m=await r(),l={...l,id:m,embedding:u},chrome.storage.local.set({[`summary-${m}`]:l},(function(){console.log("Summary saved to local storage",l)}))}async function s(t){const n=(e,t)=>{let o=e.split("\n");1===o.length&&(o=e.split("."));let n=[],s=[];return o.forEach((e=>{s.reduce(((e,t)=>e+t.length),0)+e.length>t&&(n.push(s.join("\n\n")),s=[]),s.push(e)})),s.length>0&&n.push(s.join("\n\n")),n},s=async t=>{try{return Promise.all(t.map((async t=>{const[a,i]=await o(t,e.short);if(i){if(i.message.includes("consider using fewer tokens")){console.log("chunks still too big!");const e=n(t,2e3),o=await s(e);return await r(o)}throw i}return a.completions.pop().text.trim()})))}catch(e){console.log("error received in catch block from summarizeChunks",e)}},r=async e=>e.join("\n"),a=n(t,4e3),i=await s(a);return await r(i)}async function r(){let e=await new Promise((e=>chrome.storage.local.get(["summaryIndex"],e))),t=e.summaryIndex?e.summaryIndex+1:1;return await new Promise((e=>chrome.storage.local.set({summaryIndex:t},e))),t}async function a(e){const t=await fetch("https://summarizooor-server.vercel.app/api/embeddings",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({input:e})}),o=await t.json();if(console.log("embeddings response: ",o),o.error)throw o.error.message;return o.data.embedding}function i(e,t){if(!e||!t)throw console.log("vecA: ",e),console.log("vecB: ",t),new Error("Input vectors are not defined");const o=e=>{let t=0;for(let o=0;o<e.length;o++)t+=e[o]*e[o];return Math.sqrt(t)};return((e,t)=>{let o=0;for(let n=0;n<e.length;n++)o+=e[n]*t[n];return o})(e,t)/(o(e)*o(t))}function c(){console.log("checking if summaries are in correct format"),chrome.storage.local.get(null,(async e=>{for(const t in e)if(t.includes("summary")&&!t.includes("summaryIndex")){const o=e[t];if(!o.embedding||!o.id){console.log("summary missing embedding or id",o);const e=await r(),n={...o,id:e,embedding:a(`${o.content} \n\n ${o.title} \n\n ${o.url} `)};chrome.storage.local.remove(t),chrome.storage.local.set({[`summary-${n.id}`]:n})}}console.log(e)}))}function l(e){const t=e.toLowerCase(),o=new Set(["is","a","and","with","the"]),n=t.split(" ").filter((e=>e.length>0&&!o.has(e))).join(" ").trim().split("\n").filter((e=>e.trim().length>0)).join("\n");return console.log("PROCESSED WORDS:\n",n),n}console.log("hello this is the background script!"),chrome.runtime.onMessage.addListener(((e,t,o)=>{e.text&&(console.log("Received input: "+e.text),n(e.text,e.info,e.tab)),e.searchValue&&async function(e){try{console.log("searching summarries...");const t=await new Promise((e=>{chrome.storage.local.get(null,(t=>{e(t)}))}));let o;for(const n in t)if(n.includes("searchQuery")){const s=t[n];if(s.query===e){console.log("query already exists - no need to fetch embeddings again..."),chrome.storage.local.remove(n),o=s.embedding;break}}o||(console.log("query does not exist - fetching embeddings..."),o=await a(e));let n={date:Date.now(),query:e,embedding:o};chrome.storage.local.get(null,(e=>{let t=[];for(const n in e)if(n.includes("summary")&&!n.includes("summaryIndex")){const s=e[n];console.log(s);const r=i(o,s.embedding);t.push({...s,similarity:r})}t.sort(((e,t)=>t.similarity-e.similarity)),n={...n,results:t},chrome.storage.local.set({[`searchQuery-${Date.now()}`]:n},(function(){console.log("Search query and results saved to local storage",n)})),console.log("sending search results...",t),chrome.runtime.sendMessage({type:"search_results",searchResults:t})}))}catch(e){console.log(e)}}(e.searchValue)})),chrome.runtime.onInstalled.addListener((()=>{chrome.contextMenus.create({id:"gpt-summarise",title:"Generate summary",contexts:["all"]}),chrome.tabs.create({url:"https://fxhd.notion.site/summarizooor-chrome-extension-317ba7f2f1c5443cbc99a220c5d073b0"}),c();const e=Date.now().toString()+Math.random().toString(36).substring(2,15);chrome.storage.local.set({uniqueUserId:e},(()=>{console.log("Unique user ID stored in chrome.storage.local: "+e)}))})),chrome.contextMenus.onClicked.addListener(((e,t)=>{e.selectionText?n(e.selectionText,0,t):chrome.tabs.sendMessage(t.id,{type:"get_webpage"},(e=>{console.log("webpage content received: ",e),n(e.text,0,t)}))})),chrome.runtime.onStartup.addListener((()=>{c()}))})();